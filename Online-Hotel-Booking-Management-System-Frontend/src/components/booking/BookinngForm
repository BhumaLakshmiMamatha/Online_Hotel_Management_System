package com.dailycodework.ohms.service;

import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class OTPService {

    @Autowired
    private JavaMailSender mailSender;

    private static final int OTP_EXPIRATION_TIME_IN_MINUTES = 1;

    // Thread-safe storage for OTPs and metadata
    private final Map<String, OTPDetails> otpStore = new ConcurrentHashMap<>();

    // Generate a random 6-digit OTP
    public String generateOTP() {
        Random random = new Random();
        int otp = random.nextInt(999999); // Generates a random 6-digit OTP
        return String.format("%06d", otp); // Format to 6 digits
    }

    // Send OTP via email
    public void sendOTPToEmail(String email, String otp) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(email);
            message.setSubject("Password Reset OTP");
            message.setText(
                "Dear User,\n\n" +
                "Your OTP for resetting your password is: " + otp + "\n" +
                "This OTP is valid for " + OTP_EXPIRATION_TIME_IN_MINUTES + " minutes.\n\n" +
                "If you did not request this, please ignore this email.\n\n" +
                "Regards,\nYour Application Team"
            );
            mailSender.send(message);
            log.info("OTP sent to email: {} ", email);
        } catch (Exception e) {
            log.error("Failed to send OTP to email: {}", email, e);
        }
    }

    // Request an OTP for a specific email
    public String requestOTP(String email) {
        // Always generate a new OTP each time
        String otp = generateOTP();
        otpStore.put(email, new OTPDetails(otp, System.currentTimeMillis()));
        sendOTPToEmail(email, otp);
        return "OTP sent to email.";
    }

    // Verify OTP entered by the user
    public String verifyOTP(String email, String otp) {
        OTPDetails otpDetails = otpStore.get(email);
        if (otpDetails == null) {
            return "No OTP generated for this email.";
        }

        // Check if OTP is expired
        long timeElapsed = System.currentTimeMillis() - otpDetails.getGeneratedTime();
        if (timeElapsed > TimeUnit.MINUTES.toMillis(OTP_EXPIRATION_TIME_IN_MINUTES)) {
            otpStore.remove(email); // Clean up expired OTP
            return "OTP has expired.";
        }

        // Validate OTP
        if (otpDetails.getOtp().equals(otp)) {
            otpStore.remove(email); // Remove OTP after successful verification
            log.info("OTP verified successfully for email: {}", email);
            return "OTP verified successfully.";
        } else {
            log.warn("Invalid OTP entered for email: {}", email);
            return "Invalid OTP.";
        }
    }

    // Inner class to store OTP details
    private static class OTPDetails {
        private final String otp;
        private final long generatedTime;

        public OTPDetails(String otp, long generatedTime) {
            this.otp = otp;
            this.generatedTime = generatedTime;
        }

        public String getOtp() {
            return otp;
        }

        public long getGeneratedTime() {
            return generatedTime;
        }
    }
}
